---
description: Project-Specific Rules for this Repo"
globs:
 - "**/*"
alwaysApply: true
---


# Project-Specific Cursor Rules (Generalized)

## Repo Standards
- Detect the stack automatically (Node, Python, etc.) and adapt to project config:
  - If `package.json` exists → run `npm run lint && npm run typecheck && npm test` (or equivalents defined in scripts).
  - If `pyproject.toml` / `requirements.txt` exists → run `pytest`, `ruff` (or `flake8`), and `mypy` (or `pyright`) if available.
  - If other test/lint/type tools exist in config, prefer those over inventing new commands.

## Conventions
- Use **Conventional Commits**:  
  `feat|fix|refactor|perf|chore|docs(scope): summary`
- Branch names: `type/scope-shorttopic` (e.g., `feat/login-ui`).
- Every commit must pass lint, typecheck, and tests locally before merge.

## SHIPLOG
- Maintain `docs/SHIPLOG.md`.  
- On every `feat|fix|refactor|perf` commit, append one line:  
  `YYYY-MM-DD HH:mm — [branch] type(scope): summary — commit:<shortsha>`

## Escalation Protocol (3-Try Rule)
- If the same task cannot be solved after **3 attempts**:
  - **Stop coding.**
  - Create `/docs/contextual_summary.md` with:
    - Problem description
    - Current architecture (high-level)
    - Repro steps
    - Logs/artifacts/errors
    - Attempts so far
    - Constraints/non-negotiables
    - Suspected causes
    - Narrow fix proposal
  - Request human review.

## Feature Flags & Safety
- New functionality must be **feature-flagged** with default OFF.
- Do not commit `.env`, `.pem`, `.key`, `.crt`, or `secrets/` directories.
- Use `.env.example` to document required environment variables.
- Never log or print secret values or sensitive data.

## Dependencies
- Before adding a new dependency:
  1. Justify why it’s needed.
  2. Suggest at least one lighter alternative.
  3. Note expected impact on lockfile size or bundle.

## File Safety & Compliance
- Avoid committing secrets, credentials, or tokens.
- Respect compliance constraints (HIPAA, PIPEDA, Law 25, GDPR) if the project involves personal or health data.
- Handle PHI/PII with zero retention unless explicitly required and documented.

## Execution Protocol (per task)
**Before coding**
1. Confirm acceptance criteria (bullets).
2. List impacted files and why.
3. Propose a minimal 3–6 step plan.
4. State tests to add/update.

**During coding**
- Keep changes minimal, scoped, and reversible.
- Add or update tests for both success and failure cases.
- Run lint, typecheck, and tests locally before committing.

**After coding**
- Update `docs/SHIPLOG.md`.
- Provide a clear PR description with checklist.
- If stuck after 3 tries, escalate with contextual summary.

## Git Commits
- Use Pull Requests for all changes.

## Endpoints
- Verify which endpoints require auth before implementing.