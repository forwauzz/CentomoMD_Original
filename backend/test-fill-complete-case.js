/**
 * Complete Case Filling Test
 * Creates a case, fills all major sections, and displays the complete JSON structure
 */

import 'dotenv/config';
import postgres from 'postgres';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL environment variable is required');
  console.error('   Make sure you have a .env file in the backend directory with DATABASE_URL set');
  console.error('   Or set it as an environment variable: DATABASE_URL=your_url node test-fill-complete-case.js');
  process.exit(1);
}

const sql = postgres(DATABASE_URL);

async function fillCompleteCase() {
  console.log('\nüß™ COMPLETE CASE FILLING TEST\n');
  console.log('='.repeat(70));

  try {
    // Get a test user_id (using first available user)
    const users = await sql`SELECT user_id FROM profiles LIMIT 1`;
    if (users.length === 0) {
      throw new Error('No users found in database');
    }
    const userId = users[0].user_id;
    console.log(`‚úÖ Using user_id: ${userId}`);

    // Get a test clinic_id
    const clinics = await sql`SELECT id FROM clinics LIMIT 1`;
    const clinicId = clinics.length > 0 ? clinics[0].id : null;
    console.log(`‚úÖ Using clinic_id: ${clinicId || 'null'}\n`);

    // Step 1: Create a new case
    console.log('1Ô∏è‚É£ Creating new case...');
    const caseResult = await sql`
      INSERT INTO cases (
        user_id,
        clinic_id,
        name,
        status,
        draft
      ) VALUES (
        ${userId},
        ${clinicId},
        'Test Case - Complete Fill',
        'draft',
        ${JSON.stringify({
          patientInfo: {},
          sections: {},
          metadata: {
            language: 'fr',
            status: 'draft',
            totalSections: 0,
            completedSections: 0,
            autoGeneratedName: false,
            lastAccessedAt: new Date().toISOString(),
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          },
          ui: {
            activeSectionId: 'section_a',
            order: [],
            autosave: {}
          },
          sessions: []
        })}
      )
      RETURNING id, name, status, draft
    `;
    
    const caseId = caseResult[0].id;
    console.log(`‚úÖ Case created: ${caseId}\n`);

    // Fetch current case to get draft structure
    let caseRecord = await sql`
      SELECT draft::jsonb as draft FROM cases WHERE id = ${caseId}
    `;
    // Ensure draft is parsed as JSON object
    let draft = caseRecord[0].draft;
    if (typeof draft === 'string') {
      draft = JSON.parse(draft);
    }

    // Helper function to update draft with section data
    const updateSection = (sectionId, sectionData, status = 'completed') => {
      if (!draft.sections) {
        draft.sections = {};
      }
      draft.sections[sectionId] = {
        data: sectionData,
        status: status,
        lastModified: new Date().toISOString()
      };
      draft.metadata.updatedAt = new Date().toISOString();
    };

    // Step 2: Fill Section A (Patient Information)
    console.log('2Ô∏è‚É£ Filling Section A (Patient Information)...');
    const sectionAData = {
      name: 'Jean Dupont',
      id: 'PAT-2025-001',
      dob: '1985-05-15',
      gender: 'M',
      phone: '514-555-1234',
      email: 'jean.dupont@example.com',
      address: '123 Rue Principale, Montr√©al, QC H1A 1A1'
    };
    updateSection('section_a', sectionAData);
    
    await sql`
      UPDATE cases
      SET draft = ${JSON.stringify(draft)}::jsonb,
          updated_at = NOW()
      WHERE id = ${caseId}
    `;
    console.log('‚úÖ Section A filled\n');

    // Step 3: Fill Section B (Physician Information)
    console.log('3Ô∏è‚É£ Filling Section B (Physician Information)...');
    const sectionBData = {
      lastName: 'CENTOMO',
      firstName: 'Hugo',
      license: '1-18154',
      address: '5777 Boul. Gouin Ouest, Suite 370, Montr√©al, Qc, H4J 1E3',
      phone: '514-331-1400',
      email: 'adjointe.orthopedie@gmail.com'
    };
    updateSection('section_b', sectionBData);
    
    await sql`
      UPDATE cases
      SET draft = ${JSON.stringify(draft)}::jsonb,
          updated_at = NOW()
      WHERE id = ${caseId}
    `;
    console.log('‚úÖ Section B filled\n');

    // Step 4: Fill Section C (Mandat)
    console.log('4Ô∏è‚É£ Filling Section C (Mandat)...');
    const sectionCData = {
      mandatText: '√âvaluation m√©dicale ind√©pendante demand√©e par la CNESST dans le cadre de l\'application de l\'article 204 de la LATMP. Le mandat consiste √† √©valuer la l√©sion professionnelle signal√©e et √† produire un rapport d√©taill√©.'
    };
    updateSection('section_c_mandat', sectionCData);
    
    await sql`
      UPDATE cases
      SET draft = ${JSON.stringify(draft)}::jsonb,
          updated_at = NOW()
      WHERE id = ${caseId}
    `;
    console.log('‚úÖ Section C (Mandat) filled\n');

    // Step 5: Fill Section C Modalit√©
    console.log('5Ô∏è‚É£ Filling Section C (Modalit√©)...');
    const sectionCModaliteData = {
      modaliteText: `L'√©valuation suivante s'est tenue dans les locaux de la Clinique M√©dicale de l'Or et des Bois, Val-d'Or. Nous avons clairement expliqu√© √† notre mandat d'√©valuateur ind√©pendant d√©sign√© par la CNESST dans le cadre de l'application de l'article 204 de la LATMP. Nous lui avons pr√©cis√© que nous n'agirons pas en tant que m√©decins traitants. Notre rapport d'√©valuation sera d'abord envoy√© √† la CNESST.

Nous avons proc√©d√© au questionnaire subjectif ainsi qu'√† un examen physique d√©taill√© en relation avec les l√©sions √† √©valuer, nous nous sommes assur√©s √† la fin de l'entrevue d'avoir couvert l'ensemble de la probl√©matique.

Nous avons revu le dossier CNESST de m√™me que le dossier m√©dical. Nous avons pu consulter l'ensemble des rapports et des bilans radiologiques r√©alis√©s dans le cadre de l'√©valuation de la l√©sion.

L'entrevue s'est effectu√©e cordialement, le travailleur participait pleinement √† son entrevue. L'entrevue s'est d√©roul√©e entre [heure].

√Ä la fin de l'entrevue, nous avons demand√© √† s'il avait d'autres commentaires ou informations √† nous divulguer. Ce dernier nous a r√©pondu par la n√©gative.`,
      duree: '60 minutes',
      modaliteCommentaires: 'Examen complet effectu√© sans complications.'
    };
    updateSection('section_c_modalite', sectionCModaliteData);
    
    await sql`
      UPDATE cases
      SET draft = ${JSON.stringify(draft)}::jsonb,
          updated_at = NOW()
      WHERE id = ${caseId}
    `;
    console.log('‚úÖ Section C (Modalit√©) filled\n');

    // Step 6: Fill Section 7 (History)
    console.log('6Ô∏è‚É£ Filling Section 7 (History)...');
    const section7Data = {
      mainContent: `HISTOIRE DE LA L√âSION

Le patient, M. Jean Dupont, √¢g√© de 39 ans, rapporte une l√©sion survenue le [date] alors qu'il soulevait une charge lourde lors de son travail. Il d√©crit une douleur soudaine et intense au niveau lombaire droit, irradiant vers la fesse droite et la cuisse post√©rieure.

L'√©volution depuis l'accident montre une am√©lioration progressive avec des p√©riodes de r√©cidive lors d'efforts physiques. Le patient b√©n√©ficie actuellement de traitements de physioth√©rapie et de m√©dication anti-inflammatoire.

ANT√âC√âDENTS M√âDICAUX

Ant√©c√©dents m√©dicaux non contributifs √† la l√©sion actuelle. Pas d'ant√©c√©dents de chirurgie lombaire.`
    };
    updateSection('section_7', section7Data);
    
    await sql`
      UPDATE cases
      SET draft = ${JSON.stringify(draft)}::jsonb,
          updated_at = NOW()
      WHERE id = ${caseId}
    `;
    console.log('‚úÖ Section 7 filled\n');

    // Step 7: Fill Section 8 (Physical Examination)
    console.log('7Ô∏è‚É£ Filling Section 8 (Physical Examination)...');
    const section8Data = {
      physicalExam: `EXAMEN PHYSIQUE

Examen physique effectu√© le [date]. Le patient se pr√©sente en position debout, marche avec une l√©g√®re boiterie du c√¥t√© droit.

Examen de la colonne lombaire:
- Inspection: Pas de d√©formation visible
- Palpation: Sensibilit√© √† la palpation des articulations sacro-iliaques droites
- Mobilit√©: Flexion limit√©e √† 60¬∞, extension limit√©e √† 15¬∞
- Tests neurologiques: Force musculaire normale, r√©flexes pr√©sents et sym√©triques

Examen neurologique complet effectu√© sans d√©ficit neurologique significatif.`
    };
    updateSection('section_8', section8Data);
    
    await sql`
      UPDATE cases
      SET draft = ${JSON.stringify(draft)}::jsonb,
          updated_at = NOW()
      WHERE id = ${caseId}
    `;
    console.log('‚úÖ Section 8 filled\n');

    // Step 8: Update metadata
    console.log('8Ô∏è‚É£ Updating case metadata...');
    draft.metadata.completedSections = Object.keys(draft.sections).length;
    draft.metadata.totalSections = 15;
    
    await sql`
      UPDATE cases
      SET draft = ${JSON.stringify(draft)}::jsonb,
          status = 'in_progress',
          updated_at = NOW()
      WHERE id = ${caseId}
    `;
    console.log('‚úÖ Metadata updated\n');

    // Step 9: Retrieve complete case
    console.log('9Ô∏è‚É£ Retrieving complete case data...\n');
    const completeCase = await sql`
      SELECT id, name, status, draft::jsonb as draft, created_at, updated_at
      FROM cases
      WHERE id = ${caseId}
    `;
    
    const caseData = completeCase[0];
    
    // Parse draft if it's a string
    let parsedDraft = caseData.draft;
    if (typeof parsedDraft === 'string') {
      parsedDraft = JSON.parse(parsedDraft);
    }
    
    console.log('='.repeat(70));
    console.log('üìÑ COMPLETE CASE JSON STRUCTURE');
    console.log('='.repeat(70));
    console.log('\n');

    // Display formatted JSON
    console.log(JSON.stringify(parsedDraft, null, 2));
    
    console.log('\n' + '='.repeat(70));
    console.log('üìä CASE SUMMARY');
    console.log('='.repeat(70));
    console.log(`Case ID: ${caseData.id}`);
    console.log(`Case Name: ${caseData.name}`);
    console.log(`Status: ${caseData.status}`);
    console.log(`Created: ${caseData.created_at}`);
    console.log(`Updated: ${caseData.updated_at}`);
    console.log(`\nSections Filled: ${Object.keys(parsedDraft.sections || {}).length}`);
    console.log(`Sections: ${Object.keys(parsedDraft.sections || {}).join(', ')}`);
    console.log('\n' + '='.repeat(70));
    console.log('‚úÖ TEST COMPLETED SUCCESSFULLY!\n');

    // Save to file
    const outputsDir = path.join(__dirname, '..', 'outputs');
    if (!fs.existsSync(outputsDir)) {
      fs.mkdirSync(outputsDir, { recursive: true });
    }
    const outputPath = path.join(outputsDir, `test-case-complete-${caseId}.json`);
    fs.writeFileSync(outputPath, JSON.stringify(parsedDraft, null, 2), 'utf-8');
    console.log(`üìÅ Complete JSON saved to: ${outputPath}\n`);

  } catch (error) {
    console.error('\n‚ùå TEST FAILED:', error.message);
    console.error('Error details:', error);
    process.exit(1);
  } finally {
    await sql.end();
  }
}

fillCompleteCase();

