import { Router } from 'express';
import { getDb } from '../database/connection';
import { cases } from '../database/schema';
import { eq, desc, and, gte } from 'drizzle-orm';
import { authenticateUser } from '../middleware/auth.js';

const router = Router();

// Enable authentication middleware
router.use(authenticateUser);

// POST /api/cases - Create a new case
router.post('/', async (req, res) => {
  try {
    const user = (req as any).user;
    if (!user?.user_id) {
      return res.status(401).json({ 
        error: 'Authentication required',
        message: 'No authenticated user found'
      });
    }

    const { patientInfo, clinic_id, draft } = req.body;

    console.log('📝 [Cases] Creating new case:', { 
      userId: user.user_id, 
      clinicId: clinic_id 
    });

    const db = getDb();
    
    try {
      // Create the case with default values
      const caseData: any = {
        user_id: user.user_id,
        clinic_id: clinic_id || null,
        name: 'Nouveau cas',
        draft: draft || {
          patientInfo: patientInfo || {},
          sections: {},
          metadata: {
            language: 'fr',
            status: 'draft',
            totalSections: 0,
            completedSections: 0,
            autoGeneratedName: true,
            lastAccessedAt: new Date().toISOString(),
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          },
          ui: {
            activeSectionId: '',
            order: [],
            autosave: {}
          },
          sessions: []
        }
      };

      const result = await db.insert(cases).values(caseData).returning();
      const newCase = result && result.length > 0 ? result[0] : undefined;
      if (!newCase) {
        throw new Error('Insert returned no rows');
      }

      console.log('✅ [Cases] Successfully created case:', newCase.id);

      return res.json({
        success: true,
        data: {
          id: newCase.id,
          user_id: newCase.user_id,
          clinic_id: newCase.clinic_id,
          name: newCase.name || 'Nouveau cas',
          status: newCase.status || 'draft',
          draft: newCase.draft,
          created_at: newCase.created_at,
          updated_at: newCase.updated_at
        }
      });
    } catch (dbError: any) {
      console.error('❌ [Cases] Database insert failed:', dbError);
      throw dbError;
    }
  } catch (error) {
    console.error('❌ [Cases] Failed to create case:', error);
    return res.status(500).json({ 
      success: false,
      error: 'Failed to create case',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// GET /api/cases - Get recent cases with optional filters
router.get('/', async (req, res) => {
  try {
    const user = (req as any).user;
    if (!user?.user_id) {
      return res.status(401).json({ 
        error: 'Authentication required',
        message: 'No authenticated user found'
      });
    }

    const q: any = req.query as any;
    const limit = parseInt(String(q['limit'])) || 10;
    const days = parseInt(String(q['days'])) || 30;
    const sort = (q['sort'] as string) || 'updated_at';
    const order = (q['order'] as string) || 'desc';

    console.log('📖 [Cases] Fetching recent cases:', { 
      userId: user.user_id, 
      limit, 
      days, 
      sort, 
      order 
    });

    const db = getDb();
    
    // Calculate date threshold
    const dateThreshold = new Date();
    dateThreshold.setDate(dateThreshold.getDate() - days);

    try {
      // Build query conditions
      const conditions = [
        eq(cases.user_id, user.user_id),
        gte(cases.updated_at, dateThreshold)
      ];

      // Build query with sorting
      let query = db.select()
        .from(cases)
        .where(and(...conditions));

      // Apply sorting
      if (sort === 'updated_at' && order === 'desc') {
        query = query.orderBy(desc(cases.updated_at)) as any;
      } else if (sort === 'updated_at' && order === 'asc') {
        query = query.orderBy(cases.updated_at) as any;
      } else if (sort === 'created_at' && order === 'desc') {
        query = query.orderBy(desc(cases.created_at)) as any;
      } else if (sort === 'created_at' && order === 'asc') {
        query = query.orderBy(cases.created_at) as any;
      }

      // Apply limit
      const result = await query.limit(limit);

      console.log('✅ [Cases] Successfully fetched recent cases:', result.length);

      return res.json({
        success: true,
        data: result.map(caseData => ({
          id: caseData.id,
          user_id: caseData.user_id,
          clinic_id: caseData.clinic_id,
          name: caseData.name || 'Nouveau cas',
          status: caseData.status || 'draft',
          draft: caseData.draft,
          created_at: caseData.created_at,
          updated_at: caseData.updated_at
        })),
        count: result.length
      });
    } catch (dbError: any) {
      console.error('❌ [Cases] Database fetch failed:', dbError);
      throw dbError;
    }
  } catch (error) {
    console.error('❌ [Cases] Failed to fetch recent cases:', error);
    return res.status(500).json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// PUT /api/cases/:id/status - Update case status
router.put('/:id/status', async (req, res) => {
  try {
    const { id: caseId } = req.params;
    const { status } = req.body;

    if (!status || !['draft', 'in_progress', 'completed'].includes(status)) {
      return res.status(400).json({ 
        error: 'Status must be one of: draft, in_progress, completed' 
      });
    }

    console.log('📝 [Cases] Updating case status:', caseId, 'to:', status);

    const db = getDb();
    
    // Update the case status
    const result = await db.update(cases)
      .set({ 
        status: status,
        updated_at: new Date()
      })
      .where(eq(cases.id, caseId))
      .returning();

    if (result.length === 0) {
      return res.status(404).json({ 
        error: 'Case not found' 
      });
    }

    console.log('✅ [Cases] Case status updated successfully');

    return res.json({
      success: true,
      data: {
        id: caseId,
        status: (result[0]!).status,
        updated_at: (result[0]!).updated_at
      }
    });
  } catch (error) {
    console.error('❌ [Cases] Failed to update case status:', error);
    return res.status(500).json({ 
      error: 'Failed to update case status',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// PUT /api/cases/:id/name - Update case name
router.put('/:id/name', async (req, res) => {
  try {
    const { id: caseId } = req.params;
    const { name } = req.body;

    if (!name || typeof name !== 'string' || name.trim().length === 0) {
      return res.status(400).json({ 
        error: 'Case name is required and must be a non-empty string' 
      });
    }

    console.log('📝 [Cases] Updating case name:', caseId, 'to:', name);

    const db = getDb();
    
    // Update the case name
    const result = await db.update(cases)
      .set({ 
        name: name.trim(),
        updated_at: new Date()
      })
      .where(eq(cases.id, caseId))
      .returning();

    if (result.length === 0) {
      return res.status(404).json({ 
        error: 'Case not found' 
      });
    }

    console.log('✅ [Cases] Case name updated successfully');

    return res.json({
      success: true,
      data: {
        id: caseId,
        name: (result[0]!).name,
        updated_at: (result[0]!).updated_at
      }
    });
  } catch (error) {
    console.error('❌ [Cases] Failed to update case name:', error);
    return res.status(500).json({ 
      error: 'Failed to update case name',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// POST /api/cases/:id/sections/:sectionId - Update section data
router.post('/:id/sections/:sectionId', async (req, res) => {
  try {
    const { id: caseId, sectionId } = req.params;
    const { data, status } = req.body;

    if (!data) {
      return res.status(400).json({ 
        error: 'Missing required field: data' 
      });
    }

    console.log('💾 [Cases] Updating section:', caseId, 'section:', sectionId);

    const db = getDb();
    
    try {
      // Get the current case
      const existingCase = await db.select()
        .from(cases)
        .where(eq(cases.id, caseId))
        .limit(1);

      if (existingCase.length === 0) {
        return res.status(404).json({ 
          error: 'Case not found',
          caseId 
        });
      }

      const currentCase = existingCase[0]!;
      
      // Parse draft if it's a string
      type Draft = { sections?: Record<string, any>; metadata?: Record<string, any> };
      let draft: Draft = currentCase.draft as unknown as Draft;
      if (typeof draft === 'string') {
        draft = JSON.parse(draft) as Draft;
      }

      // Update the section data
      if (!draft.sections) {
        draft.sections = {};
      }
      
      draft.sections[sectionId] = {
        data: data,
        status: status || 'in_progress',
        lastModified: new Date().toISOString()
      };

      // Update metadata
      if (!draft.metadata) {
        draft.metadata = {};
      }
      draft.metadata['updatedAt'] = new Date().toISOString();

      // Save updated draft back to database
      await db.update(cases)
        .set({
          draft: draft as any,
          updated_at: new Date()
        })
        .where(eq(cases.id, caseId))
        .returning();

      console.log('✅ [Cases] Section updated successfully:', sectionId);

      return res.json({
        success: true,
        data: {
          id: caseId,
          section_id: sectionId,
          section: {
            data: draft.sections![sectionId].data,
            status: draft.sections![sectionId].status,
            lastModified: draft.sections![sectionId].lastModified
          },
          updated_at: new Date().toISOString()
        }
      });
    } catch (dbError: any) {
      console.error('❌ [Cases] Database update failed:', dbError);
      throw dbError;
    }
  } catch (error) {
    console.error('❌ [Cases] Failed to update section:', error);
    return res.status(500).json({ 
      error: 'Failed to update section',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// POST /api/cases/:id/sections/:sectionId/commit - Commit session data to section
router.post('/:id/sections/:sectionId/commit', async (req, res) => {
  try {
    const { id: caseId, sectionId } = req.params;
    const { sessionId, finalText } = req.body;

    if (!sessionId || !finalText) {
      return res.status(400).json({ 
        error: 'Missing required fields: sessionId and finalText' 
      });
    }

    console.log('💾 [Cases] Committing to case:', caseId, 'section:', sectionId);
    console.log('📝 [Cases] Session ID:', sessionId, 'Final text length:', finalText.length);

    // Try to update the case in the database
    const db = getDb();
    
    try {
      // First, check if the case exists
      const existingCase = await db.select()
        .from(cases)
        .where(eq(cases.id, caseId))
        .limit(1);

      if (existingCase.length === 0) {
        // Get the authenticated user
        const user = (req as any).user;
        if (!user?.user_id) {
          return res.status(401).json({ 
            error: 'Authentication required',
            message: 'No authenticated user found'
          });
        }

        // Case doesn't exist, create a new one
        const newCase = await db.insert(cases).values({
          id: caseId,
          user_id: user.user_id, // Use the authenticated user
          clinic_id: '00000000-0000-0000-0000-000000000000', // Temporary clinic ID for testing
          name: 'Nouveau cas',
          draft: {
            sections: {
              [sectionId]: {
                data: {
                  finalText: finalText,
                  savedAt: new Date().toISOString(),
                  sessionId: sessionId
                }
              }
            }
          }
        }).returning();
        
        console.log('✅ [Cases] Created new case:', newCase[0]?.id);
      } else {
        // Case exists, update the draft with new section data
        const currentDraft = existingCase[0]?.draft as any || {};
        const updatedDraft = {
          ...currentDraft,
          sections: {
            ...currentDraft.sections,
            [sectionId]: {
              data: {
                finalText: finalText,
                savedAt: new Date().toISOString(),
                sessionId: sessionId
              }
            }
          }
        };

        await db.update(cases)
          .set({ 
            draft: updatedDraft,
            updated_at: new Date()
          })
          .where(eq(cases.id, caseId));
        
        console.log('✅ [Cases] Updated existing case:', caseId);
      }
    } catch (dbError) {
      console.error('❌ [Cases] Database operation failed:', dbError);
      // Fall back to stub behavior if database fails
      console.log('✅ [Cases] Successfully committed section (stub fallback):', sectionId, 'to case:', caseId);
    }

    return res.json({
      success: true,
      data: {
        id: caseId,
        section_id: sectionId,
        session_id: sessionId,
        committed_at: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('❌ [Cases] Failed to commit section:', error);
    return res.status(500).json({ 
      error: 'Failed to commit section',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// GET /api/cases/:id - Get case details
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log('📖 [Cases] Fetching case:', id);
    
    const db = getDb();
    
    try {
      const result = await db.select()
        .from(cases)
        .where(eq(cases.id, id))
        .limit(1);

      if (result.length === 0) {
        return res.status(404).json({ 
          error: 'Case not found',
          caseId: id 
        });
      }

      const caseData = result[0];
      if (!caseData) {
        return res.status(404).json({
          success: false,
          error: 'Case not found'
        });
      }
      
      console.log('✅ [Cases] Successfully fetched case:', id);

      return res.json({
        success: true,
        data: {
          id: caseData.id,
          user_id: caseData.user_id,
          clinic_id: caseData.clinic_id,
          name: caseData.name || 'Nouveau cas',
          status: caseData.status || 'draft',
          draft: caseData.draft,
          created_at: caseData.created_at,
          updated_at: caseData.updated_at
        }
      });
    } catch (dbError) {
      console.error('❌ [Cases] Database fetch failed:', dbError);
      // Fall back to stub behavior if database fails
      console.log('✅ [Cases] Successfully fetched case (stub fallback):', id);

      return res.json({
        success: true,
        data: {
          id: id,
          user_id: 'stub-user',
          clinic_id: 'stub-clinic',
          name: 'Nouveau cas',
          status: 'draft',
          draft: {},
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      });
    }
  } catch (error) {
    console.error('❌ [Cases] Failed to fetch case:', error);
    return res.status(500).json({ 
      error: 'Failed to fetch case',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

export default router;
